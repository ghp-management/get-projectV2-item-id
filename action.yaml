name: Get ProjectV2 Item ID
description: This action outputs the ProjectV2 item node ID if exists in the provided project number

inputs:
  token:
    description: GitHub Token
    required: true
  organization:
    description: Organization login name
    required: true
  project_number:
    description: ProjectV2 Number
    required: true
  node_id:
    description: Item Node ID
    required: true

outputs:
  node_id:
    description: The ProjectV2 Item Node ID in long format
    value: "${{ steps.execution.outputs.issue_node_id }}"

runs:
  using: "composite"
  steps:
    - id: execution
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          const org = "${{ inputs.organization }}";
          const p_number = ${{ inputs.project_number }};
          const i_node_id = "${{ inputs.node_id }}";

          let item = null;
          let cursor = null;
          let hasNextPage = true;

          while (hasNextPage && !item) {
            const itemQuery = `
              query($org: String!, $project: Int!, $after: String) {
                organization(login: $org) {
                  projectV2(number: $project) {
                    items(first: 100, after: $after) {
                      pageInfo {
                        hasNextPage
                        endCursor
                      }
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const res = await github.graphql(itemQuery, {
              org,
              project: p_number,
              after: cursor
            });

            const items = res.organization.projectV2.items;
            cursor = items.pageInfo.endCursor;
            hasNextPage = items.pageInfo.hasNextPage;

            item = items.nodes.find(i => i.content?.id === i_node_id);
          }

          if (!item) {
            core.setFailed(`Issue with ID #${i_node_id} is not in the project â€” skipping`);
          }

          const issue_node_id = item.id;
          console.log("Issue Node ID Found:", issue_node_id);
          core.setOutput("issue_node_id", issue_node_id);
